// debug-models.js - Script para debuggear la carga de modelos
const db = require('./app/models');

async function debugModels() {
  try {
    console.log('üîç Debuggeando carga de modelos...');
    
    // 1. Verificar conexi√≥n
    await db.sequelize.authenticate();
    console.log('‚úÖ Conexi√≥n a la base de datos exitosa');
    
    // 2. Listar todos los modelos disponibles
    const modelNames = Object.keys(db).filter(key => 
      key !== 'sequelize' && key !== 'Sequelize'
    );
    console.log('üìã Modelos cargados:', modelNames);
    
    // 3. Verificar cada modelo espec√≠ficamente
    console.log('\nüîç Verificando modelos espec√≠ficos:');
    
    if (db.user) {
      console.log('‚úÖ db.user est√° disponible');
    } else {
      console.log('‚ùå db.user NO est√° disponible');
    }
    
    if (db.role) {
      console.log('‚úÖ db.role est√° disponible');
    } else {
      console.log('‚ùå db.role NO est√° disponible');
    }
    
    if (db.user_roles) {
      console.log('‚úÖ db.user_roles est√° disponible');
    } else {
      console.log('‚ùå db.user_roles NO est√° disponible');
    }
    
    if (db.proyecto) {
      console.log('‚úÖ db.proyecto est√° disponible');
    } else {
      console.log('‚ùå db.proyecto NO est√° disponible');
    }
    
    if (db.calificaciones) {
      console.log('‚úÖ db.calificaciones est√° disponible');
    } else {
      console.log('‚ùå db.calificaciones NO est√° disponible');
    }
    
    if (db.refreshToken) {
      console.log('‚úÖ db.refreshToken est√° disponible');
    } else {
      console.log('‚ùå db.refreshToken NO est√° disponible');
    }
    
    // 4. Verificar m√©todos de los modelos
    console.log('\nüîç Verificando m√©todos de modelos:');
    
    if (db.role && typeof db.role.findOrCreate === 'function') {
      console.log('‚úÖ db.role.findOrCreate est√° disponible');
    } else {
      console.log('‚ùå db.role.findOrCreate NO est√° disponible');
    }
    
    if (db.user && typeof db.user.findOrCreate === 'function') {
      console.log('‚úÖ db.user.findOrCreate est√° disponible');
    } else {
      console.log('‚ùå db.user.findOrCreate NO est√° disponible');
    }
    
    // 5. Intentar crear un rol de prueba
    console.log('\nüß™ Probando creaci√≥n de rol...');
    
    if (db.role) {
      try {
        const testRole = await db.role.findOrCreate({
          where: { name: 'test_role' },
          defaults: { name: 'test_role' }
        });
        console.log('‚úÖ Creaci√≥n de rol exitosa');
        
        // Limpiar el rol de prueba
        await testRole[0].destroy();
        console.log('‚úÖ Rol de prueba eliminado');
      } catch (error) {
        console.error('‚ùå Error al crear rol de prueba:', error);
      }
    }
    
    console.log('\nüéâ Debug completado');
    
  } catch (error) {
    console.error('‚ùå Error en debug:', error);
  } finally {
    process.exit(0);
  }
}

debugModels(); 